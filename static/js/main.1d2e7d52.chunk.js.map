{"version":3,"sources":["components/RawBulletTextArea.js","components/bullets.js","components/AcronymViewer.js","components/abbreviations.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Word","props","handlePopoverOpen","event","setState","open","handlePopoverClose","isNotEditable","word","match","length","index","getAbbreviations","abbreviationData","abbreviation","find","row","abbr","toLowerCase","value","getSynonyms","Axios","get","then","res","status","data","all","map","item","synonyms","catch","err","state","anchorE1","isEditable","bind","this","prevProps","c","abbrvData","className","onMouseEnter","onMouseLeave","onClick","changeWord","parentIndex","synList","syn","Bullet","tokenize","text","output","split","action","impact","result","tweak","sentence","replace","updateBullet","newWord","i","newBullet","updateBulletText","join","indexOfColon","indexOfDashes","BulletEditor","extractBullets","bullets","shift","bullet","trim","newText","charAt","toUpperCase","slice","updateInputText","onChange","e","nativeEvent","target","childNodes","Array","from","node","innerText","window","getSelection","ref","createRef","inputBullets","style","width","BulletOutputViewerBullet","xToPx","x","div","document","createElement","display","height","body","appendChild","px","parseFloat","getComputedStyle","parentNode","removeChild","evaluateBullet","current","idealWidth","oldPWidth","getBoundingClientRect","getSmallestBullet","getLargestBullet","idealHeight","optimized","bulletText","processing","processed","prevState","currentBulletText","newBulletText","optimizeBullet","handleBulletChange","Promise","resolve","smallestBullet","setStateAsync","smallestBulletEval","widthDiff","largestBullet","spaceIndexes","push","terminate","prevEval","useIndexs","len","prevBullet","pop","val","splice","Math","floor","space","substring","currentEval","BulletOutputViewer","handleSelectionCopy","preventDefault","toString","clipboardData","setData","handleCopyButtonClick","range","createRange","selectNode","removeAllRanges","addRange","execCommand","bulletsText","onCopy","Button","variant","color","size","startIcon","AcronymViewer","extractAcroyms","acs","sort","alreadyAdded","indexOf","acronyms","tableSettings","columns","type","stretchH","autoWrapRow","maxRows","Infinity","manualRowResize","manualColumnResize","rowHeaders","colHeaders","trimWhitespace","enterBeginsEditing","manualRowMove","manualColumnMove","columnSorting","indicator","autoColumnSize","minRows","minSpareRows","contextMenu","licenseKey","search","queryMethod","queryStr","callback","instance","col","DEFAULT_CALLBACK","testResult","getCellMeta","isSearchResult","apply","arguments","AbbreviationTable","handleChange","onAbbrevitionDataChange","settings","afterChange","App","saveSettings","localStorage","setItem","JSON","stringify","error","console","log","getSettings","getItem","parse","onAbbreviationTableChange","newAbbreviationData","setAbbreviationTable","abreviationData","newTable","filter","abbreviationTable","handleTextAreaUpdate","inputTextRef","scrollHeight","bulletInputText","bulletTypeChange","newValue","tabValue","bulletType","toggleDrawer","v","key","drawerOpen","el","querySelector","remove","widthSettings","AWD","EPR","OPR","widthSetting","id","AppBar","position","Toolbar","Typography","Tabs","Tab","label","Container","maxWidth","Grid","container","justify","xs","md","lg","xl","spacing","align","rows","resize","minHeight","component","Drawer","anchor","onClose","class","href","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2VACkCA,IAAMC,U,yFCOlCC,G,yDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEC,MAAM,KAbL,EAgBnBC,mBAAqB,WACnB,EAAKF,SAAS,CAAEC,MAAM,KAjBL,EAoBnBE,cAAgB,SAAAC,GACd,OAAoC,MAA7BA,EAAKC,MAAM,eACW,MAAzBD,EAAKC,MAAM,WACXD,EAAKE,QAAU,EACd,EAAKT,MAAMU,MAAQ,GAxBP,EA2BnBC,iBAAmB,SAAAJ,GACjB,GAAmC,OAAhC,EAAKP,MAAMY,iBAA2B,OAAO,KAEhD,IAAMC,EAAe,EAAKb,MAAMY,iBAAiBE,MAAK,SAACC,GAAD,OAASA,EAAIC,OAAST,EAAKU,cAAgBF,EAAIG,MAAMD,gBAAkBV,EAAKU,iBAElI,MAA+B,qBAAjBJ,EAA+B,KAAOA,GAhCnC,EAmCnBM,YAAc,SAACZ,GAEba,IAAMC,IAAI,4CAA8Cd,GACrDe,MAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAIC,OAAgB,CACtB,IAAMC,EAAOF,EAAIE,KACjB,GAAoB,IAAhBA,EAAKhB,OAAc,CAErB,IAAMiB,EAAMD,EAAKE,KAAI,SAACC,GACpB,OAAOA,EAAKrB,QAGd,EAAKJ,SAAS,CAAE0B,SAAUH,SAM/BI,OAAM,SAAAC,QAnDT,EAAKC,MAAQ,CACX5B,MAAM,EACN6B,SAAU,KACVJ,SAAU,KACVK,WAAY,MAGd,EAAK7B,mBAAqB,EAAKA,mBAAmB8B,KAAxB,gBAC1B,EAAKlC,kBAAoB,EAAKA,kBAAkBkC,KAAvB,gBAVR,E,gEA4DbC,KAAK9B,cAAc8B,KAAKpC,MAAMkB,OAChCkB,KAAKjC,SAAS,CAAE+B,YAAY,KAE5BE,KAAKjB,YAAYiB,KAAKpC,MAAMkB,OAC5BkB,KAAKjC,SAAS,CAAE+B,YAAY,O,yCAIbG,GACbD,KAAKpC,MAAMkB,QAAUmB,EAAUnB,OAASkB,KAAKJ,MAAME,YACrDE,KAAKjB,YAAYiB,KAAKpC,MAAMkB,S,+BAGtB,IAAD,OACHX,EAAO6B,KAAKpC,MAAMkB,MAElBoB,EAAI,8BAGFC,EAAYH,KAAKzB,iBAAiBJ,GAExC,GAAkB,OAAdgC,EAAoB,CAEtB,GAAIA,EAAUrB,MAAMD,gBAAkBV,EAAKU,cAEzC,OADAqB,GAAQ,qBAEN,0BACEE,UAAWF,EACXG,aAAcL,KAAKnC,kBACnByC,aAAcN,KAAK/B,oBAElBE,EACD,0BAAMiC,UAAWJ,KAAKJ,MAAM5B,KAAO,iBAAmB,aACpD,wBAAIoC,UAAU,iBACZ,wBACEA,UAAU,iBACVG,QAAS,kBAAM,EAAK3C,MAAM4C,WAAWL,EAAUvB,KAAM,EAAKhB,MAAM6C,eAChEN,EAAUvB,SAQtB,GAAIuB,EAAUvB,OAAST,EAGrB,OADA+B,GAAQ,+BAEN,0BACEE,UAAWF,EACXG,aAAcL,KAAKnC,kBACnByC,aAAcN,KAAK/B,oBAGlBE,EACD,0BAAMiC,UAAWJ,KAAKJ,MAAM5B,KAAO,iBAAmB,aACpD,wBAAIoC,UAAU,iBACZ,wBACEA,UAAU,iBACVG,QAAS,kBAAM,EAAK3C,MAAM4C,WAAWL,EAAUrB,MAAMD,cAAe,EAAKjB,MAAM6C,eAC/EN,EAAUrB,UASxB,GAAIkB,KAAK9B,cAAcC,GAErB,OADA+B,EAAI,2BACI,0BAAME,UAAWF,GAAI/B,GAG/B+B,GAAQ,SAER,IAAIQ,EAAU,KAUd,OAT4B,OAAxBV,KAAKJ,MAAMH,WACbiB,EAAUV,KAAKJ,MAAMH,SAASF,KAAI,SAAAoB,GAAG,OACnC,wBACEP,UAAU,iBACVG,QAAS,kBAAM,EAAK3C,MAAM4C,WAAWG,EAAK,EAAK/C,MAAM6C,eACrDE,OAMJ,0BACEP,UAAWF,EACXG,aAAcL,KAAKnC,kBACnByC,aAAcN,KAAK/B,oBAGlBE,EACD,0BAAMiC,UAAWJ,KAAKJ,MAAM5B,KAAO,iBAAmB,aACpD,wBAAIoC,UAAU,iBAAiBM,S,GA9JtBjD,IAAMC,YAsKnBkD,E,kDACJ,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IAkBRiD,SAAW,SAACC,GACV,IAAIC,EAAS,GAGb,GAAwB,OAApBD,EAAK1C,MAAM,MAAwC,OAAvB0C,EAAK1C,MAAM,QAAkB,OAE5B0C,EAAKE,MAAM,UAFiB,mBAEtDC,EAFsD,KAE9CC,EAF8C,KAEtCC,EAFsC,KAM3DF,EAASA,EAAOD,MAAM,QACtBE,EAASA,EAAOF,MAAM,QACtBG,EAASA,EAAOH,MAAM,QAGtBD,EAAM,sBAAOE,GAAP,CAAe,KAAf,YAAuBC,GAAvB,CAA+B,MAA/B,YAAwCC,SAG9CJ,EAASD,EAAKE,MAAM,MAEtB,OAAOD,GAvCU,EA0CnBK,MAAQ,SAACC,GAMP,OADAA,GAHAA,EAAWA,EAASC,QAAQ,UAAW,cAGnBA,QAAQ,KAAM,WA/CjB,EAmDnBC,aAAe,SAACT,GAEd,OADY,EAAKD,SAASC,IApDT,EAwDnBN,WAAa,SAACgB,EAASC,GACrB,IAAIC,EAAY,EAAKb,SAAS,EAAKjD,MAAMkD,MACzCY,EAAUD,GAAKD,EACf,EAAK5D,MAAM+D,iBAAiBD,EAAUE,KAAK,KAAM,EAAKhE,MAAM6C,cAzD5D,EAAKb,MAAQ,CACXiC,aAAc,KACdC,cAAe,MAEjB,EAAKtB,WAAa,EAAKA,WAAWT,KAAhB,gBAND,E,4GAaAE,M,+BAkDT,IAAD,OACCa,EAASd,KAAKpC,MAAdkD,KAER,OADad,KAAKa,SAASC,GAGlBvB,KAAI,SAACpB,EAAMsD,GAChB,OACE,kBAAC,EAAD,CAAM3C,MAAOX,EAAMsC,YAAagB,EAAGjB,WAAY,EAAKA,WAAYhC,iBAAkB,EAAKZ,MAAMY,0B,GAvElFf,IAAMC,WA8ErBqE,E,kDAEJ,WAAYnE,GAAQ,IAAD,8BACjB,cAAMA,IAmBRoE,eAAiB,SAAAlB,GACf,IAAImB,EAAUnB,EAAKE,MAAM,UAKzB,OAJAiB,EAAQC,QACRD,EAAUA,EAAQ1C,KAAI,SAAC4C,GACrB,MAAgB,KAAOA,EAAOC,WAxBf,EA6BnBT,iBAAmB,SAACU,EAASZ,GAC3B,IAAIQ,EAAU,EAAKrC,MAAMqC,QACzBA,EAAQR,GAAKY,EACbJ,EAAQL,KAAK,KACbK,EAAQR,GAAKQ,EAAQR,GAAGH,QAAQ,QAAS,KACzCW,EAAQR,GAAKQ,EAAQR,GAAGH,QAAQ,WAAY,MAC5CW,EAAQR,GAAK,KAAOQ,EAAQR,GAAGa,OAAO,GAAGC,cAAgBN,EAAQR,GAAGe,MAAM,GAE1E,EAAK5E,MAAM6E,gBAAgBR,EAAQL,KAAK,QArCvB,EAuCnBc,SAAW,SAACC,EAAGlB,GAEb,IAAIvB,EAAIyC,EAAEC,YAAYC,OAAOC,WAC7B5C,EAAI6C,MAAMC,KAAK9C,GAAGX,KAAI,SAAA0D,GACpB,OAAOA,EAAKC,aAGDC,OAAOC,eAEpB,EAAKzB,iBAAiBzB,EAAE0B,KAAK,KAAMH,IA9CnC,EAAK7B,MAAQ,CACXqC,QAAS,IAGX,EAAKoB,IAAM5F,IAAM6F,YACjB,EAAK3B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBAPP,E,gEAWjBC,KAAKjC,SAAS,CAAEkE,QAASjC,KAAKgC,eAAehC,KAAKpC,MAAM2F,kB,yCAGvCtD,GACbD,KAAKpC,MAAM2F,eAAiBtD,EAAUsD,cACxCvD,KAAKjC,SAAS,CAAEkE,QAASjC,KAAKgC,eAAehC,KAAKpC,MAAM2F,kB,+BAqClD,IAAD,OAEP,OACE,6BACE,yBAAKnD,UAAU,gBAAgBoD,MAAO,CAAEC,MAAOzD,KAAKpC,MAAM6F,QAGtDzD,KAAKJ,MAAMqC,QAAQ1C,KAAI,SAAC4C,EAAQV,GAE9B,OACE,0BACE4B,IAAK,EAAKA,IACVjD,UAAU,wBACV,kBAAC,EAAD,CAAQU,KAAMqB,EAAQR,iBAAkB,EAAKA,iBAAkBlB,YAAagB,EAAGjD,iBAAkB,EAAKZ,MAAMY,wBAMtH,yBAAK4B,UAAU,UAAf,UACE,0BAAMA,UAAU,yBAAhB,yBACA,0BAAMA,UAAU,eAAhB,oBACA,0BAAMA,UAAU,+BAAhB,4B,GA7EiB3C,IAAMC,WAyF3BgG,E,kDACJ,WAAY9F,GAAQ,IAAD,8BACjB,cAAMA,IAqCR+F,MAAQ,SAACC,GACP,IAAIC,EAAMC,SAASC,cAAc,OACjCF,EAAIL,MAAMQ,QAAU,QACpBH,EAAIL,MAAMS,OAASL,EACnBE,SAASI,KAAKC,YAAYN,GAC1B,IAAIO,EAAKC,WAAWlB,OAAOmB,iBAAiBT,EAAK,MAAMI,QAEvD,OADAJ,EAAIU,WAAWC,YAAYX,GACpBO,GA7CU,EAgDnBK,eAAiB,WAEf,GAAiB,OAAb,EAAKpB,IAAT,CAEA,IAAMJ,EAAO,EAAKI,IAAIqB,QAChBH,EAAatB,EAAKsB,WAEpBI,EAAa,EAAKhB,MAAM,EAAK/F,MAAM6F,OAMnCmB,EAAYL,EAAWf,MAAMC,MACjCc,EAAWf,MAAMC,MAAQ,WAdJ,MAgBKR,EAAK4B,wBAAvBpB,EAhBa,EAgBbA,MAhBa,EAgBNQ,OAef,OAVAM,EAAWf,MAAMC,MAAQmB,EAUlB,CAAE,UARQnB,EAAQkB,KAvER,EAkFnBG,kBAAoB,SAAChE,GACnB,IAAIC,EAASD,EAAKE,MAAM,MAGxB,OAFAD,EAAOmB,QAEA,MADPnB,EAASA,EAAOa,KAzFD,WA0FMQ,QAtFJ,EAwFnB2C,iBAAmB,SAACjE,GAClB,IAAIC,EAASD,EAAKE,MAAM,MAGxB,OAFAD,EAAOmB,QAEA,MADPnB,EAASA,EAAOa,KA9FD,WA+FMQ,QA5FJ,EAmNnBhB,MAAQ,SAACC,GAMP,OADAA,GAHAA,EAAWA,EAASC,QAAQ,UAAW,cAGnBA,QAAQ,KAAM,WAtNlC,EAAK+B,IAAM5F,IAAM6F,YACjB,EAAK1D,MAAQ,CACXoF,YAAa,KACbL,WAAY,KACZM,WAAW,EACXC,WAAY,MAEd,EAAKC,YAAa,EAClB,EAAKC,WAAY,EAVA,E,gEAajBpF,KAAKjC,SAAS,CAAEmH,WAAYlF,KAAKpC,MAAMsH,e,yCAKtBjF,EAAWoF,GAAY,IAEhCC,EAAsBtF,KAAKJ,MAA3B0F,kBACA7B,EAAUzD,KAAKpC,MAAf6F,MAEJ8B,EAAiBF,EAAUH,aAAeI,GAA2C,OAAtBA,EAG/DtF,KAAKpC,MAAMsH,aAAejF,EAAUiF,WAAazB,IAAUxD,EAAUwD,OAEvEzD,KAAKmF,YAAa,EAClBnF,KAAKoF,WAAY,EACjBpF,KAAKjC,SAAS,CAAEmH,WAAYlF,KAAKpC,MAAMsH,WAAYD,WAAW,MACrDM,GAAkBvF,KAAKmF,YAAenF,KAAKoF,YAEpDpF,KAAKwF,iBACLxF,KAAKpC,MAAM6H,mBAAmBzF,KAAKJ,MAAMsF,WAAYlF,KAAKpC,MAAMU,U,oCA4DtDsB,GAAQ,IAAD,OACnB,OAAO,IAAI8F,SAAQ,SAACC,GAClB,EAAK5H,SAAS6B,EAAO+F,Q,wLAKR,QADXxD,EAASnC,KAAKJ,MAAMsF,Y,wDAExBlF,KAAKmF,YAAa,EAGdS,EAAiB5F,KAAK8E,kBAAkB3C,G,SACtCnC,KAAK6F,cAAc,CAAEX,WAAYU,I,aACnCE,EAAqB9F,KAAKyE,kBAEPsB,UAAY,G,wBAGjC/F,KAAKoF,WAAY,EACjBpF,KAAKmF,YAAa,E,kCAMhBa,EAAgBhG,KAAK+E,iBAAiB5C,G,UACpCnC,KAAK6F,cAAc,CAAEX,WAAYc,I,aACfhG,KAAKyE,iBAEPsB,WAAa,G,wBAGjC/F,KAAKoF,WAAY,EACjBpF,KAAKmF,YAAa,E,2BAOhBc,EAAe,GAGnBlD,MAAMC,KAAK4C,GAAgBrG,KAAI,SAACpB,EAAMsD,GAChCtD,EAAKC,MAAM,OACb6H,EAAaC,KAAKzE,MAItBwE,EAAa/D,QAETiE,GAAY,EACZC,EAAWN,EACXO,EAAY,GACZpF,EAAS,EACTqF,EAAML,EAAa5H,OACnBkI,EAAaX,EAGRnE,EAAI,E,aAAGA,EAAI6E,G,sBACVrF,E,OACD,I,QAGA,I,QAGA,I,gCANGoF,EAAUH,KAAKD,EAAa/D,S,oCAG5BmE,EAAUH,KAAKD,EAAaO,O,oCAI9BC,EAAMR,EAAaS,OAAOC,KAAKC,MAAMX,EAAa5H,OAAO,GAAG,GAChEgI,EAAUH,KAAKO,EAAI,I,iEAOR,KADfxF,GAAU,KACUA,EAAS,G,QAjBNQ,I,2BAoBjB0E,E,oBACmB,IAArBE,EAAUhI,O,wBAEZ8H,GAAY,E,uCAIRU,EAAST,EAASL,UAAY,EAvLvB,SADA,SA2LTtE,EAAI4E,EAAUnE,QAClB0D,EAAiBA,EAAekB,UAAU,EAAGrF,GAAKoF,EAAQjB,EAAekB,UAAUrF,EAAI,G,UAGjFzB,KAAK6F,cAAc,CAAEX,WAAYU,I,cACnCmB,EAAc/G,KAAKyE,kBAEPsB,UAAY,G,wBAE1BK,EAAWW,EACXR,EAAaX,E,gCAIXmB,EAAYhB,UAAY,IAE1BH,EAAiBW,EACjBJ,GAAY,G,+BAKhBnG,KAAKoF,WAAY,EACjBpF,KAAKmF,YAAa,EAClBnF,KAAKjC,SAAS,CAAEmH,WAAYU,EAAgBX,WAAW,I,kBAE/C9C,G,sIAUA,IAGJ/B,EADkBJ,KAAKJ,MAAnBqF,UACoB,iCAAmC,oCAC/D,OAEE,yBAAK7E,UAAWA,EAAWiD,IAAKrD,KAAKqD,KAClCrD,KAAKJ,MAAMsF,gB,GAnOmBzH,IAAMC,WAyOvCsJ,E,kDACJ,WAAYpJ,GAAQ,IAAD,8BACjB,cAAMA,IAkBRoE,eAAiB,SAAAlB,GACf,IAAImB,EAAUnB,EAAKE,MAAM,UAKzB,OAJAiB,EAAQC,QACRD,EAAUA,EAAQ1C,KAAI,SAAC4C,GACrB,MAAgB,KAAOA,EAAOC,OAAS,WAvBxB,EA4BnB6E,oBAAsB,SAAAtE,GACpBA,EAAEuE,iBACF,IAAIpG,EAAOqC,OAAOC,eAAe+D,YAEjCrG,GADAA,EAAO,EAAKkB,eAAelB,IACfc,KAAK,KACZN,QAAQ,MAAO,QAEpBqB,EAAEyE,cAAcC,QAAQ,aAAcvG,IAnCrB,EAuCnBwG,sBAAwB,SAAC3E,GACvB,IAAI4E,EAAQzD,SAAS0D,cACrBD,EAAME,WAAW,EAAKpE,IAAIqB,SAC1BvB,OAAOC,eAAesE,kBACtBvE,OAAOC,eAAeuE,SAASJ,GAC/BzD,SAAS8D,YAAY,QACrBzE,OAAOC,eAAesE,mBA7CL,EAgDnBjC,mBAAqB,SAACpD,EAASZ,GAC7B,IAAIQ,EAAU,EAAKrC,MAAMqC,QACzBA,EAAQR,GAAKY,EACb,EAAKtE,SAAS,CAAEkE,QAASA,KAjDzB,EAAKrC,MAAQ,CACXqC,QAAS,IAEX,EAAKoB,IAAM5F,IAAM6F,YALA,E,gEAUjBtD,KAAKjC,SAAS,CAAEkE,QAASjC,KAAKgC,eAAehC,KAAKpC,MAAMiK,iB,yCAGvC5H,GACbD,KAAKpC,MAAMiK,cAAgB5H,EAAU4H,aACvC7H,KAAKjC,SAAS,CAAEkE,QAASjC,KAAKgC,eAAehC,KAAKpC,MAAMiK,iB,+BAuClD,IAAD,OAEP,OACE,6BACE,yBAAKzH,UAAU,0BAA0BoD,MAAO,CAAEC,MAAOzD,KAAKpC,MAAM6F,OAClEqE,OAAQ9H,KAAKiH,qBACb,kDAAuB,4EACvB,yBAAK5D,IAAKrD,KAAKqD,KAIXrD,KAAKJ,MAAMqC,QAAQ1C,KAAI,SAAC4C,EAAQV,GAE9B,OAAQ,kBAAC,EAAD,CACNgC,MAAO,EAAK7F,MAAM6F,MAClByB,WAAY/C,EACZ7D,MAAOmD,EACPgE,mBAAoB,EAAKA,0BAQnC,kBAACsC,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACL3H,QAAS,SAACoC,GAAD,OAAO,EAAK2E,sBAAsB3E,IAC3CwF,UAAW,kBAAC,IAAD,OALb,kC,GAhFyB1K,IAAMC,WC5fxB0K,E,kDA7DX,WAAYxK,GAAQ,IAAD,8BACf,cAAMA,IAIV0J,sBAAwB,SAAC3E,GACrB,IAAI4E,EAAQzD,SAAS0D,cACrBD,EAAME,WAAW,EAAKpE,IAAIqB,SAC1BvB,OAAOC,eAAesE,kBACtBvE,OAAOC,eAAeuE,SAASJ,GAC/BzD,SAAS8D,YAAY,QACrBzE,OAAOC,eAAesE,mBAXP,EAcnBW,eAAiB,WAAO,IACZvH,EAAS,EAAKlD,MAAdkD,KACR,GAAY,OAATA,EACC,MAAO,kBAEX,IAAIwH,EAAMxH,EAAK1C,MAAM,cACrB,GAAW,OAARkK,EACC,MAAO,kBAEXA,EAAMA,EAAIC,OACV,IAAIC,EAAe,GAQnB,OAPAF,EAAMA,EAAI/I,KAAI,SAAC+I,GACX,IAAkC,IAA/BE,EAAaC,QAAQH,GAEpB,OADAE,EAAatC,KAAKoC,GACX,KAAOA,EAAM,UA1B5B,EAAKjF,IAAM5F,IAAM6F,YAFF,E,qDAmCT,IAAD,OACCoF,EAAW1I,KAAKqI,iBACtB,OACI,6BACI,yBAAKjI,UAAU,0BAA0BoD,MAAO,CAC5CC,MAAOzD,KAAKpC,MAAM6F,QAElB,yCAAc,0FACd,yBAAKrD,UAAU,uBAAuBiD,IAAKrD,KAAKqD,KAC3CqF,IAGT,kBAACX,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACL3H,QAAS,SAACoC,GAAD,OAAO,EAAK2E,sBAAsB3E,IAC3CwF,UAAW,kBAAC,IAAD,OALf,uC,GAhDY1K,IAAMC,W,SCD5BiL,EAAgB,CAClBC,QAAS,CAAC,CACNvJ,KAAM,QACNwJ,KAAM,QACJ,CACFxJ,KAAM,OACNwJ,KAAM,SAGVC,SAAU,MACVrF,MAAO,IACPsF,aAAa,EACb9E,OAAQ,IACR+E,QAASC,IACTC,iBAAiB,EACjBC,oBAAoB,EACpBC,YAAY,EACZC,WAAY,CACR,OACA,gBAEJC,gBAAgB,EAChBC,oBAAmB,EACnBC,eAAe,EACfC,kBAAkB,EAClBC,cAAe,CACXC,WAAW,GAEfC,gBAAgB,EAChBC,QAAS,EACTC,aAAa,EACbC,aAAa,EACbC,WAAY,gCACZC,OAAQ,CACJC,YAAa,SAASC,EAASrL,GAC3B,OAAOqL,EAAShD,aAAerI,EAAMqI,YAEzCiD,SAAU,SAASC,EAAU1L,EAAK2L,EAAKxL,EAAOqC,GAC1C,IAAMoJ,EAAmB,SAASF,EAAU1L,EAAK2L,EAAKjL,EAAMmL,GACxDH,EAASI,YAAY9L,EAAK2L,GAAKI,eAAiBF,GAGpDD,EAAiBI,MAAM3K,KAAM4K,cA+BxBC,E,kDAzBb,WAAYjN,GAAQ,IAAD,8BACjB,cAAMA,IAORkN,aAAe,SAAAnI,GAGA,OAANA,GACH,EAAK/E,MAAMmN,wBAAwBpI,IAVvC,EAAK/C,MAAQ,GAFI,E,qDAgBV,IACFpB,EAAoBwB,KAAKpC,MAAzBY,iBACP,OAEI,kBAAC,IAAD,CAAU4B,UAAW,qBAAsB4K,SAAUrC,EAAgBtJ,KAAMb,EAAkByM,YAAajL,KAAK8K,mB,GArBvFrN,IAAMC,W,+DC6KvBwN,E,kDA7Mb,WAAYtN,GAAQ,IAAD,8BACjB,cAAMA,IAmCRuN,aAAe,SAACH,GACd,IACE7H,OAAOiI,aAAaC,QAAQ,WAAYC,KAAKC,UAAUP,IACvD,MAAOQ,GACPC,QAAQC,IAAIF,KAxCG,EA4CnBG,YAAc,WACZ,IACE,GAAGxI,OAAOiI,aAAaQ,QAAQ,YAE7B,OADeN,KAAKO,MAAM1I,OAAOiI,aAAaQ,QAAQ,aAGxD,MAAOJ,GAEP,OADAC,QAAQC,IAAIF,GACL,KAET,OAAO,MAtDU,EAyDnBM,0BAA4B,SAACC,GAAyB,IAE5CvN,EAAqB,EAAKoB,MAA1BpB,iBAER,EAAKwN,qBAAqBxN,GAE1BiN,QAAQC,IAAIlN,GACZ,IAAIwM,EAAW,CAACxM,iBAAiBA,GACjC,EAAK2M,aAAaH,IAjED,EAoEnBgB,qBAAuB,SAACC,GACtB,IAAIC,EAAWD,EAAgBE,QAAO,SAACxN,GAAD,OAAqB,OAAdA,EAAIG,OAA+B,OAAbH,EAAIC,QACvEsN,EAAWA,EAAS3M,KAAI,SAACZ,GAGvB,OAFAA,EAAIC,KAAOD,EAAIC,KAAKwD,OACpBzD,EAAIG,MAAQH,EAAIG,MAAMsD,OACfzD,KAET,EAAKZ,SAAS,CAACqO,kBAAkBF,KA3EhB,EA8EnBG,qBAAuB,SAACvL,GACtB,EAAKwL,aAAa5H,QAAQlB,MAAMS,OAAS,EAAKqI,aAAa5H,QAAQ6H,aAAe,KAClF,EAAKxO,SAAS,CAAEyO,gBAAiB1L,KAhFhB,EAmFnB2L,iBAAmB,SAAC9J,EAAG+J,GAErB,EAAK3O,SAAS,CAAE4O,SAAUD,EAAUE,WADlB,CAAC,MAAO,MAAO,OAC2BF,MArF3C,EAuFnBG,aAAe,SAAC/O,EAAMgP,IACD,YAAfhP,EAAM+K,MAAqC,QAAd/K,EAAMiP,KAA+B,UAAdjP,EAAMiP,MAG9D,EAAKhP,SAAS,CAACiP,WAAWF,KAzF1B,EAAKlN,MAAQ,CACX4M,gBAAiB,yQACjBhO,iBAAkB,CAChB,CAAEM,MAAO,WAAYF,KAAM,QAC3B,CAAEE,MAAO,SAAUF,KAAM,QAE3BwN,kBAAkB,CAAC,CAAEtN,MAAO,WAAYF,KAAM,QAC9C,CAAEE,MAAO,SAAUF,KAAM,QACzBgO,WAAY,MACZD,SAAU,EACVK,YAAY,GAEd,EAAKV,aAAe7O,IAAM6F,YAC1B,EAAK+I,qBAAuB,EAAKA,qBAAqBtM,KAA1B,gBAfX,E,gEAmBjB,IAAMkN,EAAKnJ,SAASoJ,cAAc,qBAC5BD,GACFA,EAAGE,SAGP,IAAInC,EAAWhL,KAAK2L,cACJ,OAAbX,IAEDhL,KAAKjC,SAAS,CAACS,iBAAkBwM,EAASxM,mBAC1CwB,KAAKgM,qBAAqBhB,EAASxM,qB,6EAiE7B,IAAD,OACD4O,EAAgB,CACpBC,IAAK,YACLC,IAAK,YACLC,IAAK,aAEDC,EAAeJ,EAAcpN,KAAKJ,MAAMgN,YAE9C,OACE,yBAAKa,GAAG,OAAOrN,UAAU,QAEvB,kBAACsN,EAAA,EAAD,CAAQC,SAAS,SAASvN,UAAU,WAClC,kBAACwN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAY7F,QAAQ,KAAKC,MAAM,UAAU7H,UAAU,SAAnD,iBAGA,kBAAC0N,EAAA,EAAD,CACE1N,UAAU,GACVtB,MAAOkB,KAAKJ,MAAM+M,SAClBjK,SAAU1C,KAAKyM,kBAIf,kBAACsB,EAAA,EAAD,CAAKC,MAAM,QACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,QACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,SAEb,kBAACjG,EAAA,EAAD,CAAQG,KAAK,QAAQF,QAAQ,WAAWC,MAAM,UAAUE,UAAW,kBAAC,IAAD,MAAiB5H,QAAS,SAACoC,GAAD,OAAK,EAAKkK,aAAalK,GAAE,KAAtH,mBAIJ,kBAACsL,EAAA,EAAD,CAAW7N,UAAU,UAAU8N,SAAS,MACtC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBACtB,kBAACF,EAAA,EAAD,CAAM3O,MAAI,EAAC8O,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,QAAS,EAAGC,MAAM,UAC1D,kBAACd,EAAA,EAAD,CAAY7F,QAAQ,MAApB,sBAIA,8BACE3E,IAAKrD,KAAKsM,aACVxN,MAAOkB,KAAKJ,MAAM4M,gBAClBoC,KAAM,EACNlM,SAAU,SAACC,GAAD,OAAO,EAAK0J,qBAAqB1J,EAAEE,OAAO/D,QACpDsB,UAAU,oBACVoD,MAAO,CACLC,MAAO2J,EAAcpN,KAAKJ,MAAMgN,YAChCiC,OAAQ,OACRC,UAAW,SAGf,6BACA,kBAAC/G,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAM,UACNC,KAAK,QACLC,UAAW,kBAAC,IAAD,MACX5H,QAAS,WACP,EAAK8L,qBAAqB,IAC1B,EAAKC,aAAa5H,QAAQlB,MAAMS,OAAO,QAP3C,gBAaA,kBAAC4J,EAAA,EAAD,CAAY7F,QAAQ,KAAK+G,UAAU,MAAnC,uBAIA,kBAAC,EAAD,CACExL,aAAcvD,KAAKJ,MAAM4M,gBACzB/J,gBAAiBzC,KAAKqM,qBACtB7N,iBAAkBwB,KAAKJ,MAAMwM,kBAC7B3I,MAAO+J,KAKX,kBAACW,EAAA,EAAD,CAAM3O,MAAI,EAAC8O,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,QAAS,EAAGC,MAAM,UAC1D,kBAACd,EAAA,EAAD,CAAY7F,QAAQ,KAAK+G,UAAU,MAAnC,iBAIE,kBAAC,EAAD,CACElH,YAAa7H,KAAKJ,MAAM4M,gBACxB/I,MAAO+J,EACP/K,gBAAiBzC,KAAKqM,uBAG1B,kBAAC,EAAD,CAAe5I,MAAO+J,EACtB1M,KAAMd,KAAKJ,MAAM4M,oBAIrB,kBAACwC,EAAA,EAAD,CAAQ5O,UAAU,SAAS6O,OAAO,SAASjR,KAAMgC,KAAKJ,MAAMoN,WAAYkC,QAAS,SAACvM,GAAD,OAAO,EAAKkK,aAAalK,GAAG,KAC7G,yBAAKvC,UAAU,iBACb,kBAACyN,EAAA,EAAD,CAAY7F,QAAQ,MAApB,+BACA,kBAAC6F,EAAA,EAAD,CAAY7F,QAAQ,aAApB,oHAEA,kBAAC,EAAD,CAAmBxJ,iBAAkBwB,KAAKJ,MAAMpB,iBAAkBuM,wBAAyB/K,KAAK8L,8BAK7F,yBAAKqD,MAAM,eACd,iDAAsB,uBAAGC,KAAK,4BAAR,gBAAtB,KAA2E,uBAAGA,KAAK,6BAAR,gBAA3E,aAAyI,uBAAGA,KAAK,iCAAR,iBACzI,sE,GAxMM3R,IAAMC,WCJJ2R,QACW,cAA7BlM,OAAOmM,SAASC,UAEe,UAA7BpM,OAAOmM,SAASC,UAEhBpM,OAAOmM,SAASC,SAASnR,MACvB,2DCONoR,IAASC,OACH,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5L,SAAS6L,eAAe,SDsGxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5Q,MAAK,SAAA6Q,GACJA,EAAaC,gBAEdtQ,OAAM,SAAA8L,GACLC,QAAQD,MAAMA,EAAMyE,c","file":"static/js/main.1d2e7d52.chunk.js","sourcesContent":["import React from 'react';\r\nclass InputBulletTextArea extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n      };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      \r\n    }\r\n  \r\n    textAreaUpdate = (evnt) =>{\r\n      this.setState({text: evnt.target.value});\r\n    }\r\n    render() {\r\n        const widthSettings = {\r\n            AWD:'202.321mm',\r\n            EPR:'202.321mm',\r\n            OPR :'201.041mm',\r\n        }\r\n\r\n      return (\r\n        <textarea \r\n          rows={5} \r\n          value={this.state.text} \r\n          onChange={this.textAreaUpdate}\r\n          className=\"bullet-text\"\r\n          style={{\r\n              width: widthSettings[this.props.bulletType],\r\n              resize:\"none\",\r\n            }}\r\n          />\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default InputBulletTextArea;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Axios from 'axios';\r\n\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { render } from '@testing-library/react';\r\nclass Word extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      anchorE1: null,\r\n      synonyms: null,\r\n      isEditable: null,\r\n    };\r\n\r\n    this.handlePopoverClose = this.handlePopoverClose.bind(this);\r\n    this.handlePopoverOpen = this.handlePopoverOpen.bind(this);\r\n  }\r\n  handlePopoverOpen = (event) => {\r\n    this.setState({ open: true })\r\n  };\r\n\r\n  handlePopoverClose = () => {\r\n    this.setState({ open: false })\r\n  }\r\n\r\n  isNotEditable = word => {\r\n    return word.match(/([A-Z]{2,})/) != null\r\n      | word.match(/([0-9])/) != null\r\n      | word.length <= 2\r\n      | (this.props.index < 1);\r\n  }\r\n\r\n  getAbbreviations = word => {\r\n    if(this.props.abbreviationData === null){return null}\r\n    // extract dictionary\r\n    const abbreviation = this.props.abbreviationData.find((row) => row.abbr === word.toLowerCase() | row.value.toLowerCase() === word.toLowerCase());\r\n\r\n    return typeof abbreviation === \"undefined\" ? null : abbreviation;\r\n  }\r\n\r\n  getSynonyms = (word) => {\r\n    ////console.log(\"Attempting to get synonyms for: \" + word)\r\n    Axios.get(\"https://api.datamuse.com/words?max=15&ml=\" + word)\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          const data = res.data;\r\n          if (data.length !== 0) {\r\n\r\n            const all = data.map((item) => {\r\n              return item.word\r\n            });\r\n            ////console.log(all)\r\n            this.setState({ synonyms: all })\r\n          }\r\n        } else {\r\n          //console.log(`Failed to fetch synonyms: ${res}`);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        //console.log(`ERR: ${JSON.toString(err)}`);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.isNotEditable(this.props.value)) {\r\n      this.setState({ isEditable: false })\r\n    } else {\r\n      this.getSynonyms(this.props.value);\r\n      this.setState({ isEditable: true })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.value !== prevProps.value && this.state.isEditable) {\r\n      this.getSynonyms(this.props.value);\r\n    }\r\n  }\r\n  render() {\r\n    let word = this.props.value;\r\n\r\n    let c = \"bullet-editor-word-editable\";\r\n\r\n    // Check if abbreviable\r\n    const abbrvData = this.getAbbreviations(word);\r\n\r\n    if (abbrvData !== null) {\r\n\r\n      if (abbrvData.value.toLowerCase() === word.toLowerCase()) { // Abbreviable word\r\n        c = c + \" abbreviable popup\"\r\n        return (\r\n          <span\r\n            className={c}\r\n            onMouseEnter={this.handlePopoverOpen}\r\n            onMouseLeave={this.handlePopoverClose}\r\n          >\r\n            {word}\r\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n              <ul className=\"popuptextlist\">\r\n                <li\r\n                  className=\"synonym-button\"\r\n                  onClick={() => this.props.changeWord(abbrvData.abbr, this.props.parentIndex)}\r\n                >{abbrvData.abbr}\r\n                </li>\r\n              </ul>\r\n            </span>\r\n          </span>\r\n        );\r\n      }\r\n\r\n      if (abbrvData.abbr === word) {\r\n        // Already abbreviated word\r\n        c = c + \" approved-abbreviation popup\"\r\n        return (\r\n          <span\r\n            className={c}\r\n            onMouseEnter={this.handlePopoverOpen}\r\n            onMouseLeave={this.handlePopoverClose}\r\n\r\n          >\r\n            {word}\r\n            <span className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n              <ul className=\"popuptextlist\">\r\n                <li\r\n                  className=\"synonym-button\"\r\n                  onClick={() => this.props.changeWord(abbrvData.value.toLowerCase(), this.props.parentIndex)}\r\n                >{abbrvData.value}\r\n                </li>\r\n              </ul>\r\n            </span>\r\n          </span>\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.isNotEditable(word)) {\r\n      c = \"bullet-editor-word popup\";\r\n      return (<span className={c}>{word}</span>);\r\n    }\r\n\r\n    c = c + \" popup\";\r\n\r\n    let synList = null;\r\n    if (this.state.synonyms !== null) {\r\n      synList = this.state.synonyms.map(syn =>\r\n        <li\r\n          className=\"synonym-button\"\r\n          onClick={() => this.props.changeWord(syn, this.props.parentIndex)}\r\n        >{syn}</li>\r\n      )\r\n    }\r\n\r\n    return (\r\n\r\n      <span\r\n        className={c}\r\n        onMouseEnter={this.handlePopoverOpen}\r\n        onMouseLeave={this.handlePopoverClose}\r\n\r\n      >\r\n        {word}\r\n        <span className={this.state.open ? \"popuptext show\" : \"popuptext\"} >\r\n          <ul className=\"popuptextlist\">{synList}</ul>\r\n        </span>\r\n      </span>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nclass Bullet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      indexOfColon: null,\r\n      indexOfDashes: null,\r\n    };\r\n    this.changeWord = this.changeWord.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //this.setState({ bullet: this.updateBullet(this.props.text) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // if (this.props.text !== prevProps.text) {\r\n    //   this.setState({ bullet: this.updateBullet(this.props.text) })\r\n    // }\r\n  }\r\n\r\n  tokenize = (text) => {\r\n    let output = [];\r\n\r\n\r\n    if (text.match(';') !== null && text.match(/-{2}/) !== null) {\r\n      // First extract A;I--R\r\n      let [action, impact, result] = text.split(/;|-{2}/);\r\n      ////console.log(`action: ${action} impact: ${impact} result: ${result}`)\r\n\r\n      // Then split each up by spaces\r\n      action = action.split(/[\\s]/);\r\n      impact = impact.split(/[\\s]/);\r\n      result = result.split(/[\\s]/);\r\n\r\n      // Recombine w/ spaces in right spots.\r\n      output = [...action, \";\", ...impact, \"--\", ...result];\r\n    } else {\r\n      // We have some strange input so split on any end punctuations\r\n      output = text.split(/\\s/);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  tweak = (sentence) => {\r\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\r\n    sentence = sentence.replace(/(\\w)\\//g, '$1/\\u200B');\r\n\r\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\r\n    sentence = sentence.replace(/-/g, '\\u2011');\r\n    return sentence;\r\n  }\r\n\r\n  updateBullet = (text) => {\r\n    let words = this.tokenize(text);\r\n    return words;\r\n  }\r\n\r\n  changeWord = (newWord, i) => {\r\n    let newBullet = this.tokenize(this.props.text);\r\n    newBullet[i] = newWord;\r\n    this.props.updateBulletText(newBullet.join(' '), this.props.parentIndex);\r\n    //console.log(\"bullet change:\" + newBullet.join(' '))\r\n  }\r\n\r\n  render() {\r\n    const { text } = this.props;\r\n    let bullet = this.tokenize(text);\r\n    return (\r\n\r\n      bullet.map((word, i) => {\r\n        return (\r\n          <Word value={word} parentIndex={i} changeWord={this.changeWord} abbreviationData={this.props.abbreviationData} />\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nclass BulletEditor extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bullets: [],\r\n\r\n    };\r\n    this.ref = React.createRef();\r\n    this.updateBulletText = this.updateBulletText.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ bullets: this.extractBullets(this.props.inputBullets) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.inputBullets !== prevProps.inputBullets) {\r\n      this.setState({ bullets: this.extractBullets(this.props.inputBullets) })\r\n    }\r\n  }\r\n\r\n  extractBullets = text => {\r\n    let bullets = text.split(/-\\s{1}/);\r\n    bullets.shift();\r\n    bullets = bullets.map((bullet) => {\r\n      return bullet = \"- \" + bullet.trim();\r\n    });\r\n    return bullets;\r\n  }\r\n\r\n  updateBulletText = (newText, i) => {\r\n    let bullets = this.state.bullets;\r\n    bullets[i] = newText;\r\n    bullets.join(' ');\r\n    bullets[i] = bullets[i].replace(/\\s;\\s/, \";\");\r\n    bullets[i] = bullets[i].replace(/\\s-{2}\\s/, \"--\");\r\n    bullets[i] = \"- \" + bullets[i].charAt(2).toUpperCase() + bullets[i].slice(3);\r\n    //console.log(\"bullet round 2: \" + bullets[i])\r\n    this.props.updateInputText(bullets.join('\\n'));\r\n  }\r\n  onChange = (e, i) => {\r\n\r\n    let c = e.nativeEvent.target.childNodes;\r\n    c = Array.from(c).map(node => {\r\n      return node.innerText;\r\n    })\r\n\r\n    let oldSel = window.getSelection();\r\n\r\n    this.updateBulletText(c.join(' '), i);\r\n\r\n\r\n    //console.log(window.getSelection())\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bullet-editor\" style={{ width: this.props.width }}>\r\n          {\r\n            // Creat a bullet around each bullet\r\n            this.state.bullets.map((bullet, i) => {\r\n\r\n              return (\r\n                <span\r\n                  ref={this.ref}\r\n                  className=\"bullet-editor-bullet\">\r\n                  <Bullet text={bullet} updateBulletText={this.updateBulletText} parentIndex={i} abbreviationData={this.props.abbreviationData} />\r\n                </span>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n        <div className=\"legend\">Legend: \r\n          <span className=\"approved-abbreviation\">Approved Abbreviation</span>\r\n          <span className=\"abbreviable\">Abbreviable Word</span>\r\n          <span className=\"bullet-editor-word-editable\">Synonyms Available</span>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst smallSpace = \"\\u2006\";\r\nconst largeSpace = \"\\u2004\";\r\n\r\nclass BulletOutputViewerBullet extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ref = React.createRef()\r\n    this.state = {\r\n      idealHeight: null,\r\n      idealWidth: null,\r\n      optimized: false,\r\n      bulletText: null,\r\n    };\r\n    this.processing = false;\r\n    this.processed = false;\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ bulletText: this.props.bulletText })\r\n    //this.evaluateBullet()\r\n    //console.log(\"did mount\")\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    const { currentBulletText } = this.state;\r\n    const { width } = this.props;\r\n\r\n    let newBulletText = (prevState.bulletText !== currentBulletText && currentBulletText !== null);\r\n\r\n    // We have a props update, clear everything and start over\r\n    if (this.props.bulletText !== prevProps.bulletText | width !== prevProps.width) {\r\n      //console.log(\"did update with new props\")\r\n      this.processing = false;\r\n      this.processed = false;\r\n      this.setState({ bulletText: this.props.bulletText, optimized: false })\r\n    } else if (newBulletText && !this.processing && !this.processed) {\r\n      //console.log(\"did update with new state to process\"); \r\n      this.optimizeBullet();\r\n      this.props.handleBulletChange(this.state.bulletText, this.props.index);\r\n    }\r\n  }\r\n\r\n  xToPx = (x) => {\r\n    let div = document.createElement('div');\r\n    div.style.display = 'block';\r\n    div.style.height = x;\r\n    document.body.appendChild(div);\r\n    let px = parseFloat(window.getComputedStyle(div, null).height);\r\n    div.parentNode.removeChild(div);\r\n    return px;\r\n  }\r\n\r\n  evaluateBullet = () => {\r\n\r\n    if (this.ref === null) { return }\r\n\r\n    const node = this.ref.current;\r\n    const parentNode = node.parentNode;\r\n\r\n    let idealWidth = this.xToPx(this.props.width);\r\n\r\n    // // Undo wrapping so we get the single line height\r\n    // node.style.whiteSpace = 'nowrap';\r\n\r\n    // let idealHeight = node.getBoundingClientRect().height;\r\n    let oldPWidth = parentNode.style.width;\r\n    parentNode.style.width = \"800.00mm\";\r\n\r\n    const { width, height } = node.getBoundingClientRect();\r\n\r\n    // // Re-enable wrapping\r\n    // node.style.whiteSpace = 'pre-wrap';\r\n    // node.style.wordBreak = \"break-word\";\r\n    parentNode.style.width = oldPWidth;\r\n\r\n    let widthDiff = (width - idealWidth);\r\n\r\n    // if (height > idealHeight + 2) {\r\n    //   wrapped = true;\r\n    // }\r\n\r\n    \r\n    ////console.log(`bullet width difference: ${widthDiff}`)\r\n    return { \"widthDiff\": widthDiff };\r\n  }\r\n\r\n  getSmallestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(smallSpace);\r\n    return \"- \" + output.trim();\r\n  }\r\n  getLargestBullet = (text) => {\r\n    let output = text.split(/\\s/);\r\n    output.shift(); // remove hypen then add later\r\n    output = output.join(largeSpace);\r\n    return \"- \" + output.trim();\r\n  }\r\n  setStateAsync(state) {\r\n    return new Promise((resolve) => {\r\n      this.setState(state, resolve)\r\n    });\r\n  }\r\n  async optimizeBullet() {\r\n    let bullet = this.state.bulletText;\r\n    if (bullet === null) { return; }\r\n    this.processing = true;\r\n    ////console.log(\"building bullet: .\" + bullet);\r\n\r\n    let smallestBullet = this.getSmallestBullet(bullet);\r\n    await this.setStateAsync({ bulletText: smallestBullet })\r\n    let smallestBulletEval = this.evaluateBullet();\r\n\r\n    if (smallestBulletEval.widthDiff > 0) {\r\n\r\n      ////console.log(\"bullet to large: .\" + bullet);\r\n      this.processed = true;\r\n      this.processing = false;\r\n\r\n      return;\r\n    }\r\n\r\n    ////console.log(\"phase 2 of bullet: .\" + bullet);\r\n    let largestBullet = this.getLargestBullet(bullet);\r\n    await this.setStateAsync({ bulletText: largestBullet })\r\n    let largestBulletEval = this.evaluateBullet();\r\n\r\n    if (largestBulletEval.widthDiff <= 0) {\r\n      // Bullet optimized but it may not touch the line lol\r\n      ////console.log(\"Bullet with all large spaces: \" + bullet);\r\n      this.processed = true;\r\n      this.processing = false;\r\n      return;\r\n    }\r\n\r\n    // If we made it here then we can work with this bullet more\r\n    ////console.log(\"can be optimized further: \" + smallestBullet)\r\n\r\n    let spaceIndexes = [];\r\n\r\n    // Find position of all space chars\r\n    Array.from(smallestBullet).map((word, i) => {\r\n      if (word.match(/\\s/)) {\r\n        spaceIndexes.push(i);\r\n      }\r\n      return;\r\n    });\r\n    spaceIndexes.shift(); // remove the first space since we dont want to add one after hypen\r\n\r\n    let terminate = false;\r\n    let prevEval = smallestBulletEval;\r\n    let useIndexs = [];\r\n    let action = 0;\r\n    let len = spaceIndexes.length;\r\n    let prevBullet = smallestBullet;\r\n\r\n    // Shuffel up the space replacement\r\n    for (let i = 0; i < len; i++) {\r\n      switch (action) {\r\n        case 0: useIndexs.push(spaceIndexes.shift()); \r\n          break;// change space towards begining\r\n\r\n        case 1: useIndexs.push(spaceIndexes.pop());\r\n          break;// Chjange space towards end\r\n\r\n        case 2: \r\n          let val = spaceIndexes.splice(Math.floor(spaceIndexes.length/2),1)\r\n          useIndexs.push(val[0]);\r\n          break; // Change space in the middle\r\n\r\n        default:\r\n          break;\r\n      }\r\n      action += 1;\r\n      if (action === 3) { action = 0; }\r\n    }\r\n\r\n    while (!terminate) {\r\n      if (useIndexs.length === 0) {\r\n        ////console.log(\"exhausted all index values\")\r\n        terminate = true;\r\n        continue;\r\n      }\r\n\r\n      const space = (prevEval.widthDiff < 0) ? largeSpace : smallSpace;\r\n\r\n      // Replace the index with the appropriate space char\r\n      let i = useIndexs.shift();\r\n      smallestBullet = smallestBullet.substring(0, i) + space + smallestBullet.substring(i + 1);\r\n      //console.log(\"new bullet iteration: \" + smallestBullet);\r\n      // Re-evalute the size attributes\r\n      await this.setStateAsync({ bulletText: smallestBullet });\r\n      let currentEval = this.evaluateBullet();\r\n\r\n      if (currentEval.widthDiff < 0) {\r\n        // Still room to go.\r\n        prevEval = currentEval;\r\n        prevBullet = smallestBullet;\r\n        continue;\r\n      }\r\n\r\n      if (currentEval.widthDiff > 0) {\r\n        // Grew to big keep the old bullet\r\n        smallestBullet = prevBullet;\r\n        terminate = true;\r\n      }\r\n    }\r\n\r\n    // If we get here we should be optimized!\r\n    this.processed = true;\r\n    this.processing = false;\r\n    this.setState({ bulletText: smallestBullet, optimized: true });\r\n\r\n    return (bullet);\r\n  }\r\n  tweak = (sentence) => {\r\n    // adds a 0-width space (\\u200B) after forward slashes to cause them to wrap\r\n    sentence = sentence.replace(/(\\w)\\//g, '$1/\\u200B');\r\n\r\n    // adds a non-breaking dash (\\u2011) instead of a dash to prevent wrapping\r\n    sentence = sentence.replace(/-/g, '\\u2011');\r\n    return sentence;\r\n  }\r\n  render() {\r\n\r\n    const { optimized } = this.state;\r\n    let className = optimized ? \"bullet-output-bullet optimized\" : \"bullet-output-bullet notoptimized\";\r\n    return (\r\n\r\n      <div className={className} ref={this.ref}>\r\n        {this.state.bulletText}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass BulletOutputViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bullets: [],\r\n    };\r\n    this.ref = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    //console.log(this.props.bulletsText)\r\n    this.setState({ bullets: this.extractBullets(this.props.bulletsText) })\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.bulletsText !== prevProps.bulletsText) {\r\n      this.setState({ bullets: this.extractBullets(this.props.bulletsText) })\r\n    }\r\n  }\r\n\r\n  extractBullets = text => {\r\n    let bullets = text.split(/-\\s{1}/);\r\n    bullets.shift();\r\n    bullets = bullets.map((bullet) => {\r\n      return bullet = \"- \" + bullet.trim() + '\\r\\n';\r\n    });\r\n    return bullets;\r\n  }\r\n\r\n  handleSelectionCopy = e => {\r\n    e.preventDefault();\r\n    let text = window.getSelection().toString();\r\n    text = this.extractBullets(text);\r\n    text = text.join('');\r\n    text.replace(/\\n/g, '\\r\\n'); //need this for WINDOWS!\r\n    //console.log('Copy event: ' + text)\r\n    e.clipboardData.setData('text/plain', text);\r\n\r\n  }\r\n\r\n  handleCopyButtonClick = (e) => {\r\n    let range = document.createRange();\r\n    range.selectNode(this.ref.current);\r\n    window.getSelection().removeAllRanges(); // clear current selection\r\n    window.getSelection().addRange(range);\r\n    document.execCommand(\"copy\");\r\n    window.getSelection().removeAllRanges(); // clear current selection\r\n  }\r\n\r\n  handleBulletChange = (newText, i) => {\r\n    let bullets = this.state.bullets;\r\n    bullets[i] = newText;\r\n    this.setState({ bullets: bullets })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"bullet-output-container\" style={{ width: this.props.width }}\r\n          onCopy={this.handleSelectionCopy}>\r\n          <p>XX. AMAZING BULLETS <mark>(Dont forget to copy to the right place!)</mark></p>\r\n          <div ref={this.ref}>\r\n            {\r\n              \r\n              // Create a bullet around each bullet\r\n              this.state.bullets.map((bullet, i) => {\r\n\r\n                return (<BulletOutputViewerBullet\r\n                  width={this.props.width}\r\n                  bulletText={bullet}\r\n                  index={i}\r\n                  handleBulletChange={this.handleBulletChange}\r\n\r\n                />);\r\n              })\r\n            }\r\n          </div>\r\n          \r\n        </div>\r\n        <Button\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n          onClick={(e) => this.handleCopyButtonClick(e)}\r\n          startIcon={<FileCopyIcon />}\r\n        >\r\n          Copy Bullets to Clipboard\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { BulletOutputViewer, BulletEditor }\r\nexport default BulletEditor;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nclass AcronymViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    handleCopyButtonClick = (e) => {\r\n        let range = document.createRange();\r\n        range.selectNode(this.ref.current);\r\n        window.getSelection().removeAllRanges(); // clear current selection\r\n        window.getSelection().addRange(range);\r\n        document.execCommand(\"copy\");\r\n        window.getSelection().removeAllRanges(); // clear current selection\r\n    }\r\n\r\n    extractAcroyms = () => {\r\n        const { text } = this.props;\r\n        if(text === null){\r\n            return \"no acronyms yet\";\r\n        }\r\n        let acs = text.match(/[A-Z]{2,}/g);\r\n        if(acs === null){\r\n            return \"no acronyms yet\";\r\n        }\r\n        acs = acs.sort();\r\n        let alreadyAdded = [];\r\n        acs = acs.map((acs)=>{\r\n            if(alreadyAdded.indexOf(acs) === -1){\r\n                alreadyAdded.push(acs)\r\n                return \" (\" + acs + \"); \";\r\n            }\r\n          return;\r\n        })\r\n        return acs;\r\n      }\r\n      \r\n    render() {\r\n        const acronyms = this.extractAcroyms();\r\n        return (\r\n            <div>\r\n                <div className=\"bullet-output-container\" style={{\r\n                    width: this.props.width\r\n                }}>\r\n                    <p>X. REMARKS <mark>(use this section to spell out acronyms from the front)</mark></p>\r\n                    <div className=\"bullet-output-bullet\" ref={this.ref}>\r\n                        {acronyms}\r\n                    </div>\r\n                </div>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={(e) => this.handleCopyButtonClick(e)}\r\n                    startIcon={<FileCopyIcon />}\r\n                >\r\n                    Copy Acronym List to Clipboard\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AcronymViewer;","import React from 'react';\r\nimport { HotTable } from '@handsontable/react';\r\n\r\nconst tableSettings = {\r\n    columns: [{\r\n        data: 'value',\r\n        type: 'text'\r\n        },{\r\n        data: 'abbr',\r\n        type: 'text'\r\n        },\r\n    ],\r\n    stretchH: 'all',\r\n    width: 500,\r\n    autoWrapRow: true,\r\n    height: 500,\r\n    maxRows: Infinity,\r\n    manualRowResize: true,\r\n    manualColumnResize: true,\r\n    rowHeaders: true,\r\n    colHeaders: [\r\n        'Word',\r\n        'Abbreviation',\r\n    ],\r\n    trimWhitespace: false,\r\n    enterBeginsEditing:false,\r\n    manualRowMove: true,\r\n    manualColumnMove: true,\r\n    columnSorting: {\r\n        indicator: true\r\n    },\r\n    autoColumnSize: false,\r\n    minRows: 2,\r\n    minSpareRows:1,\r\n    contextMenu: true,\r\n    licenseKey: 'non-commercial-and-evaluation',\r\n    search: {\r\n        queryMethod: function(queryStr,value){\r\n            return queryStr.toString() === value.toString();\r\n        },\r\n        callback: function(instance, row, col, value, result){\r\n            const DEFAULT_CALLBACK = function(instance, row, col, data, testResult) {\r\n                instance.getCellMeta(row, col).isSearchResult = testResult;\r\n            };\r\n  \r\n            DEFAULT_CALLBACK.apply(this, arguments);\r\n        },\r\n    },\r\n  };\r\n\r\nclass AbbreviationTable extends React.Component{\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        \r\n      };\r\n      \r\n    }\r\n  \r\n    handleChange = e => {\r\n          // Call parent to update state need to do value and abbr seperatly! They each come back as there own event.\r\n        \r\n          if(e === null){return;} \r\n          this.props.onAbbrevitionDataChange(e);\r\n          \r\n    }\r\n  \r\n    render(){\r\n    const {abbreviationData} = this.props;\r\n    return(\r\n          \r\n        <HotTable className={\"abbreviation-table\"} settings={tableSettings}  data={abbreviationData} afterChange={this.handleChange}/>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default AbbreviationTable;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Tabs, Tab } from '@material-ui/core';\nimport './App.css';\nimport './components/RawBulletTextArea';\nimport { BulletEditor, BulletOutputViewer } from './components/bullets';\nimport AcronymViewer from './components/AcronymViewer';\nimport AbbreviationTable from './components/abbreviations'\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Drawer from '@material-ui/core/Drawer';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bulletInputText: \"- Facilitated 152 SITREPs to NAF/ACC/JBSA; delivered oversight for 1,300 pers--vital to operations during pandemic\\n- This tool can optimize spacing; output will be red if the optimizer could not fix spacing with 2004 or 2006 Unicode spaces\\n\",\n      abbreviationData: [\n        { value: \"personel\", abbr: \"pers\" },\n        { value: \"member\", abbr: \"mbr\" }\n      ],\n      abbreviationTable:[{ value: \"personel\", abbr: \"pers\" },\n      { value: \"member\", abbr: \"mbr\" }],\n      bulletType: \"OPR\",\n      tabValue: 0,\n      drawerOpen: false,\n    };\n    this.inputTextRef = React.createRef();\n    this.handleTextAreaUpdate = this.handleTextAreaUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    const el = document.querySelector(\".loader-container\");\n      if (el) {\n        el.remove();  // removing the spinner element\n        //this.setState({ loading: false }); // showing the app\n      }\n    let settings = this.getSettings();\n    if(settings !== null)\n    {\n      this.setState({abbreviationData: settings.abbreviationData})\n      this.setAbbreviationTable(settings.abbreviationData);\n    }\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  saveSettings = (settings) =>{\n    try {\n      window.localStorage.setItem('settings', JSON.stringify(settings));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  getSettings = () =>{\n    try {\n      if(window.localStorage.getItem('settings')){\n        let settings = JSON.parse(window.localStorage.getItem('settings'));\n        return settings;\n      }\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n    return null;\n  }\n\n  onAbbreviationTableChange = (newAbbreviationData) => {\n   \n    const { abbreviationData } = this.state;\n    \n    this.setAbbreviationTable(abbreviationData);\n\n    console.log(abbreviationData);\n    let settings = {abbreviationData:abbreviationData}\n    this.saveSettings(settings)\n  }\n\n  setAbbreviationTable = (abreviationData) =>{\n    let newTable = abreviationData.filter((row)=>row.value !== null && row.abbr !== null);\n    newTable = newTable.map((row)=>{\n      row.abbr = row.abbr.trim();\n      row.value = row.value.trim();\n      return row;\n    })\n    this.setState({abbreviationTable:newTable})\n  }\n\n  handleTextAreaUpdate = (text) => {\n    this.inputTextRef.current.style.height = this.inputTextRef.current.scrollHeight + \"px\"\n    this.setState({ bulletInputText: text });\n  }\n\n  bulletTypeChange = (e, newValue) => {\n    let bulletTypes = [\"OPR\", \"EPR\", \"AWD\"];\n    this.setState({ tabValue: newValue, bulletType: bulletTypes[newValue] });\n  }\n  toggleDrawer = (event,v) =>{\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n    this.setState({drawerOpen:v})\n  }\n  render() {\n    const widthSettings = {\n      AWD: '202.321mm',\n      EPR: '202.321mm',\n      OPR: '201.050mm',\n    }\n    const widthSetting = widthSettings[this.state.bulletType];\n\n    return (\n      <div id=\"root\" className=\"root\">\n\n        <AppBar position=\"static\" className=\"app-bar\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" className=\"title\">\n              Bullet Buddy!\n            </Typography>\n            <Tabs\n              className=\"\"\n              value={this.state.tabValue}\n              onChange={this.bulletTypeChange}\n              // indicatorColor=\"primary\"\n              // textColor=\"primary\"\n              >\n              <Tab label=\"OPR\" />\n              <Tab label=\"EPR\" />\n              <Tab label=\"AWD\" />\n            </Tabs>\n            <Button size=\"small\" variant=\"outlined\" color=\"inherit\" startIcon={<ViewListIcon/>} onClick={(e)=>this.toggleDrawer(e,true)}>Abbreviations</Button>\n          </Toolbar>\n        </AppBar>\n\n        <Container className=\"content\" maxWidth=\"xl\">\n          <Grid container justify=\"space-around\">\n            <Grid item xs={12} md={12} lg={12} xl={6} spacing={1} align=\"center\">\n              <Typography variant=\"h6\">\n                Input Bullets Here\n            </Typography>\n              \n              <textarea\n                ref={this.inputTextRef}\n                value={this.state.bulletInputText}\n                rows={6}\n                onChange={(e) => this.handleTextAreaUpdate(e.target.value)}\n                className=\"bullet-input-text\"\n                style={{\n                  width: widthSettings[this.state.bulletType],\n                  resize: \"none\",\n                  minHeight: \"5em\",\n                }}\n              />\n              <div>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"small\"\n                startIcon={<DeleteIcon />}\n                onClick={()=>{\n                  this.handleTextAreaUpdate(\"\")\n                  this.inputTextRef.current.style.height=\"5em\"\n                }}\n              >Clear Input\n              </Button>\n              </div>\n\n              <Typography variant=\"h6\" component=\"h2\">\n                Smart Bullet Editor\n              </Typography>\n                \n              <BulletEditor\n                inputBullets={this.state.bulletInputText}\n                updateInputText={this.handleTextAreaUpdate}\n                abbreviationData={this.state.abbreviationTable} \n                width={widthSetting}\n                />\n                \n            </Grid>\n\n            <Grid item xs={12} md={12} lg={12} xl={6} spacing={1} align=\"center\">\n              <Typography variant=\"h6\" component=\"h2\">\n                Bullet Output\n          </Typography>\n            \n                <BulletOutputViewer\n                  bulletsText={this.state.bulletInputText}\n                  width={widthSetting}\n                  updateInputText={this.handleTextAreaUpdate}\n                />\n              \n              <AcronymViewer width={widthSetting} \n              text={this.state.bulletInputText}/>\n            </Grid>\n          </Grid>\n          \n          <Drawer className=\"drawer\" anchor=\"bottom\" open={this.state.drawerOpen} onClose={(e) => this.toggleDrawer(e, false)}>\n          <div className=\"drawer-header\">\n            <Typography variant=\"h6\">Current Abbreviations Table</Typography>\n            <Typography variant=\"subtitle1\">Copy your organizations approved abbreviations into the table. (They will save in your browser for future use!)</Typography>\n          </div>\n            <AbbreviationTable abbreviationData={this.state.abbreviationData} onAbbrevitionDataChange={this.onAbbreviationTableChange} />\n          </Drawer>\n\n          \n        </Container>\n               <div class=\"bottom-text\">\n            <p>This site utilizes <a href=\"https://material-ui.com/\"> Material-UI</a>, <a href=\"https://handsontable.com/\">HandsOnTable</a>, and the <a href=\"https://www.datamuse.com/api/\">DataMuse API</a></p>\n            <p>Maintained by Nicholas Schweikart</p>\n          </div> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// implementing fontReady as a promise (instead of using document.fonts.ready) to make it Edge compatible\n// const fontReady = new Promise(function(resolve,rej){\n//   window.WebFont.load({\n//       custom: {\n//           families: ['AdobeTimes']\n//       }\n//   });\n//   resolve();\n// });\n\n// fontReady.then( ()=>{\n//   ReactDOM.render(\n//     <React.StrictMode>\n//       <App />\n//     </React.StrictMode>,\n//     document.getElementById('root')\n//   );\n// });\n\nReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    );\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}